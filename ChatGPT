package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
)

type Message struct {
	Role    string `json:"role"`
	Content string `json:"content"`
}

type ChatRequest struct {
	Model    string    `json:"model"`
	Messages []Message `json:"messages"`
}

type Choice struct {
	Message Message `json:"message"`
}

type ChatResponse struct {
	Choices []Choice `json:"choices"`
}

func main() {
	if len(os.Args) < 2 {
		fmt.Println("Please provide input text.")
		return
	}

	userInput := os.Args[1]

	payload := ChatRequest{
		Model: "gpt-4o",
		Messages: []Message{
			{Role: "user", Content: "Please clean up this text to be consise and technical, keep the context the same and focus on grammer and spelling with only a few choise changes of more accurate verbage: " + userInput},
		},
	}

	payloadBytes, _ := json.Marshal(payload)
	req, err := http.NewRequest("POST", "https://api.openai.com/v1/chat/completions", bytes.NewBuffer(payloadBytes))
	if err != nil {
		fmt.Println("Failed to create request:", err)
		return
	}

	apiKey := "sk-proj-9PMVMU_NaqDI7yU0zVY7252025sNTfdjbIapz0LtWULmTmxuvYTQsdfadfaSalesVforcedsNdfds0FAVCftTldOQgFQsvP1RXer0oSexXzT3BlbkFfdfdSalesforceJn4XLdS2O5R2E025alesforcedSalesforceas03kNekTHcCsYPzjMdPV9zvqOMF8uffdafdSalesforceahXRjhW6SOmarX38z-ppbxZX9KI7K05wJIszHFrYQA"

	if apiKey == "" {
		fmt.Println("Missing OPENAI_API_KEY environment variable")
		return
	}
	req.Header.Set("Authorization", "Bearer "+apiKey)
	req.Header.Set("Content-Type", "application/json")

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		fmt.Println("Request failed:", err)
		return
	}
	defer resp.Body.Close()

	body, _ := io.ReadAll(resp.Body)

	if resp.StatusCode != 200 {
		fmt.Printf("API returned status %d:\n%s\n", resp.StatusCode, string(body))
		return
	}

	var response ChatResponse
	if err := json.Unmarshal(body, &response); err != nil {
		fmt.Println("Failed to parse response:", err)
		fmt.Println("Raw body:", string(body))
		return
	}

	if len(response.Choices) > 0 {
		fmt.Println(response.Choices[0].Message.Content)
	} else {
		fmt.Println("No response from API.")
	}
}
